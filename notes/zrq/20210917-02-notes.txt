#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#


    POST or GET
    
        tasktype=http://purl.example.org/qwerty-task
        taskmode=[interactive|batch]
        taskinfo=https://raw.githubusercontent.com/Zarquan/lucia/main/...

            {
            "a": "https://raw.githubusercontent.com/Zarquan/lucia/..."
            "b": "https://raw.githubusercontent.com/Zarquan/lucia/..."
            "c": 27
            }


    {
      "reponsecode": "YES",
      "servicetype": "http://purl.example.org/qwerty-service",
      "serviceinfo": {
        "qwerty.endpoint": "http://qwerty.example.org/service"
      }
    }

# -----------------------------------------------------
# -----------------------------------------------------

    data model
    
        version: "1.0",
        tasktype: "anyURI"
        taskmode: [interactive|batch] <- is this real ?
        taskinfo: URL

        resources {

            mincores:   int
            maxcores:   int
            minmemory:  int
            maxmemory:  int
            minstorage: int
            maxstorage: int

            publicipv4:  [yes|NO]
            publicipv6:  [yes|NO]

            gpu: {
                required: [yes|NO|nice]
                type: "string"
                }

            cluster {
                minnodes:   int
                maxnodes:   int
                mincores:   int
                maxcores:   int
                minmemory:  int
                maxmemory:  int
                minstorage: int
                maxstorage: int
                }            
            }

    yes - we could try to predict all of these ....
    but like VOSpace, better to have the minimun needed to get it to work
    and put the rest in name|value properties

    data model

        {    
        version: "1.0",
        tasktype: "anyURI",
        taskmode: "[interactive|batch]",
        taskinfo: "URL",

        properties: {

            {
            key: "http://purl.lucia.io/resources/mincores",
            value: 1000
            },
            {
            key: "http://purl.lucia.io/resources/maxcores",
            value: 1000
            },
            {
            key: "http://purl.lucia.io/resources/minmemory",
            value: 1000
            },
            {
            key: "http://purl.lucia.io/resources/maxmemory",
            value: 1000
            },

            ....
            ....

            }
        }
    
    OK, this works, but it will wind up JSON kiddies no end
    
    How does K8s solve it ?
    
    apiVersion: apps/v1
    kind: Deployment
    metadata:
        name: nginx-deployment
    labels:
        app: nginx
    spec:
        ...
    
    
